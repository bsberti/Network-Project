// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#include "addressbook.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Authentication {
constexpr CreateAccountPacket::CreateAccountPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , salt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hashed_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(0){}
struct CreateAccountPacketDefaultTypeInternal {
  constexpr CreateAccountPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAccountPacketDefaultTypeInternal() {}
  union {
    CreateAccountPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAccountPacketDefaultTypeInternal _CreateAccountPacket_default_instance_;
constexpr CreateAccountSuccessPacket::CreateAccountSuccessPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(0){}
struct CreateAccountSuccessPacketDefaultTypeInternal {
  constexpr CreateAccountSuccessPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAccountSuccessPacketDefaultTypeInternal() {}
  union {
    CreateAccountSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAccountSuccessPacketDefaultTypeInternal _CreateAccountSuccessPacket_default_instance_;
constexpr CreateAccountFailurePacket::CreateAccountFailurePacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(0)
  , reasonid_(0)
{}
struct CreateAccountFailurePacketDefaultTypeInternal {
  constexpr CreateAccountFailurePacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAccountFailurePacketDefaultTypeInternal() {}
  union {
    CreateAccountFailurePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAccountFailurePacketDefaultTypeInternal _CreateAccountFailurePacket_default_instance_;
constexpr LoginPacket::LoginPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hashed_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(0){}
struct LoginPacketDefaultTypeInternal {
  constexpr LoginPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginPacketDefaultTypeInternal() {}
  union {
    LoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginPacketDefaultTypeInternal _LoginPacket_default_instance_;
}  // namespace Authentication
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_addressbook_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_addressbook_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_addressbook_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_addressbook_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountPacket, userid_),
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountPacket, email_),
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountPacket, salt_),
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountPacket, hashed_password_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountSuccessPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountSuccessPacket, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountFailurePacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountFailurePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountFailurePacket, userid_),
  PROTOBUF_FIELD_OFFSET(::Authentication::CreateAccountFailurePacket, reasonid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Authentication::LoginPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Authentication::LoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Authentication::LoginPacket, userid_),
  PROTOBUF_FIELD_OFFSET(::Authentication::LoginPacket, email_),
  PROTOBUF_FIELD_OFFSET(::Authentication::LoginPacket, hashed_password_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::Authentication::CreateAccountPacket)},
  { 14, 21, -1, sizeof(::Authentication::CreateAccountSuccessPacket)},
  { 22, 30, -1, sizeof(::Authentication::CreateAccountFailurePacket)},
  { 32, 41, -1, sizeof(::Authentication::LoginPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Authentication::_CreateAccountPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Authentication::_CreateAccountSuccessPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Authentication::_CreateAccountFailurePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Authentication::_LoginPacket_default_instance_),
};

const char descriptor_table_protodef_addressbook_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021addressbook.proto\022\016Authentication\"[\n\023C"
  "reateAccountPacket\022\016\n\006userId\030\001 \002(\005\022\r\n\005em"
  "ail\030\002 \002(\t\022\014\n\004salt\030\003 \002(\t\022\027\n\017hashed_passwo"
  "rd\030\004 \002(\t\",\n\032CreateAccountSuccessPacket\022\016"
  "\n\006userId\030\001 \002(\005\"\310\001\n\032CreateAccountFailureP"
  "acket\022\016\n\006userId\030\001 \002(\005\022C\n\010reasonId\030\002 \002(\0162"
  "1.Authentication.CreateAccountFailurePac"
  "ket.reason\"U\n\006reason\022\032\n\026ACCOUNT_ALREADY_"
  "EXISTS\020\000\022\024\n\020INVALID_PASSWORD\020\001\022\031\n\025INTERN"
  "AL_SERVER_ERROR\020\002\"E\n\013LoginPacket\022\016\n\006user"
  "Id\030\001 \002(\005\022\r\n\005email\030\002 \002(\t\022\027\n\017hashed_passwo"
  "rd\030\003 \002(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_addressbook_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_addressbook_2eproto = {
  false, false, 448, descriptor_table_protodef_addressbook_2eproto, "addressbook.proto", 
  &descriptor_table_addressbook_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_addressbook_2eproto::offsets,
  file_level_metadata_addressbook_2eproto, file_level_enum_descriptors_addressbook_2eproto, file_level_service_descriptors_addressbook_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_addressbook_2eproto_getter() {
  return &descriptor_table_addressbook_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_addressbook_2eproto(&descriptor_table_addressbook_2eproto);
namespace Authentication {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountFailurePacket_reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_addressbook_2eproto);
  return file_level_enum_descriptors_addressbook_2eproto[0];
}
bool CreateAccountFailurePacket_reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateAccountFailurePacket_reason CreateAccountFailurePacket::ACCOUNT_ALREADY_EXISTS;
constexpr CreateAccountFailurePacket_reason CreateAccountFailurePacket::INVALID_PASSWORD;
constexpr CreateAccountFailurePacket_reason CreateAccountFailurePacket::INTERNAL_SERVER_ERROR;
constexpr CreateAccountFailurePacket_reason CreateAccountFailurePacket::reason_MIN;
constexpr CreateAccountFailurePacket_reason CreateAccountFailurePacket::reason_MAX;
constexpr int CreateAccountFailurePacket::reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CreateAccountPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAccountPacket>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hashed_password(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

CreateAccountPacket::CreateAccountPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Authentication.CreateAccountPacket)
}
CreateAccountPacket::CreateAccountPacket(const CreateAccountPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt()) {
    salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_salt(), 
      GetArenaForAllocation());
  }
  hashed_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hashed_password()) {
    hashed_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hashed_password(), 
      GetArenaForAllocation());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:Authentication.CreateAccountPacket)
}

void CreateAccountPacket::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hashed_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_ = 0;
}

CreateAccountPacket::~CreateAccountPacket() {
  // @@protoc_insertion_point(destructor:Authentication.CreateAccountPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAccountPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashed_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAccountPacket::ArenaDtor(void* object) {
  CreateAccountPacket* _this = reinterpret_cast< CreateAccountPacket* >(object);
  (void)_this;
}
void CreateAccountPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccountPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccountPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Authentication.CreateAccountPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      salt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      hashed_password_.ClearNonDefaultToEmpty();
    }
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Authentication.CreateAccountPacket.email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Authentication.CreateAccountPacket.salt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string hashed_password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hashed_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Authentication.CreateAccountPacket.hashed_password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccountPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Authentication.CreateAccountPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Authentication.CreateAccountPacket.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string salt = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Authentication.CreateAccountPacket.salt");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_salt(), target);
  }

  // required string hashed_password = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hashed_password().data(), static_cast<int>(this->_internal_hashed_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Authentication.CreateAccountPacket.hashed_password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hashed_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Authentication.CreateAccountPacket)
  return target;
}

size_t CreateAccountPacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Authentication.CreateAccountPacket)
  size_t total_size = 0;

  if (_internal_has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (_internal_has_salt()) {
    // required string salt = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt());
  }

  if (_internal_has_hashed_password()) {
    // required string hashed_password = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashed_password());
  }

  if (_internal_has_userid()) {
    // required int32 userId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return total_size;
}
size_t CreateAccountPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Authentication.CreateAccountPacket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string salt = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt());

    // required string hashed_password = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashed_password());

    // required int32 userId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAccountPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountPacket::GetClassData() const { return &_class_data_; }

void CreateAccountPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAccountPacket *>(to)->MergeFrom(
      static_cast<const CreateAccountPacket &>(from));
}


void CreateAccountPacket::MergeFrom(const CreateAccountPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Authentication.CreateAccountPacket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_salt(from._internal_salt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_hashed_password(from._internal_hashed_password());
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountPacket::CopyFrom(const CreateAccountPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Authentication.CreateAccountPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CreateAccountPacket::InternalSwap(CreateAccountPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &salt_, lhs_arena,
      &other->salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hashed_password_, lhs_arena,
      &other->hashed_password_, rhs_arena
  );
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_addressbook_2eproto_getter, &descriptor_table_addressbook_2eproto_once,
      file_level_metadata_addressbook_2eproto[0]);
}

// ===================================================================

class CreateAccountSuccessPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAccountSuccessPacket>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CreateAccountSuccessPacket::CreateAccountSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Authentication.CreateAccountSuccessPacket)
}
CreateAccountSuccessPacket::CreateAccountSuccessPacket(const CreateAccountSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:Authentication.CreateAccountSuccessPacket)
}

void CreateAccountSuccessPacket::SharedCtor() {
userid_ = 0;
}

CreateAccountSuccessPacket::~CreateAccountSuccessPacket() {
  // @@protoc_insertion_point(destructor:Authentication.CreateAccountSuccessPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAccountSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateAccountSuccessPacket::ArenaDtor(void* object) {
  CreateAccountSuccessPacket* _this = reinterpret_cast< CreateAccountSuccessPacket* >(object);
  (void)_this;
}
void CreateAccountSuccessPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccountSuccessPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccountSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Authentication.CreateAccountSuccessPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountSuccessPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccountSuccessPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Authentication.CreateAccountSuccessPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Authentication.CreateAccountSuccessPacket)
  return target;
}

size_t CreateAccountSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Authentication.CreateAccountSuccessPacket)
  size_t total_size = 0;

  // required int32 userId = 1;
  if (_internal_has_userid()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAccountSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountSuccessPacket::GetClassData() const { return &_class_data_; }

void CreateAccountSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAccountSuccessPacket *>(to)->MergeFrom(
      static_cast<const CreateAccountSuccessPacket &>(from));
}


void CreateAccountSuccessPacket::MergeFrom(const CreateAccountSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Authentication.CreateAccountSuccessPacket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountSuccessPacket::CopyFrom(const CreateAccountSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Authentication.CreateAccountSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountSuccessPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CreateAccountSuccessPacket::InternalSwap(CreateAccountSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountSuccessPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_addressbook_2eproto_getter, &descriptor_table_addressbook_2eproto_once,
      file_level_metadata_addressbook_2eproto[1]);
}

// ===================================================================

class CreateAccountFailurePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAccountFailurePacket>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reasonid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CreateAccountFailurePacket::CreateAccountFailurePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Authentication.CreateAccountFailurePacket)
}
CreateAccountFailurePacket::CreateAccountFailurePacket(const CreateAccountFailurePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reasonid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(reasonid_));
  // @@protoc_insertion_point(copy_constructor:Authentication.CreateAccountFailurePacket)
}

void CreateAccountFailurePacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reasonid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(reasonid_));
}

CreateAccountFailurePacket::~CreateAccountFailurePacket() {
  // @@protoc_insertion_point(destructor:Authentication.CreateAccountFailurePacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateAccountFailurePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateAccountFailurePacket::ArenaDtor(void* object) {
  CreateAccountFailurePacket* _this = reinterpret_cast< CreateAccountFailurePacket* >(object);
  (void)_this;
}
void CreateAccountFailurePacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccountFailurePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccountFailurePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Authentication.CreateAccountFailurePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reasonid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(reasonid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountFailurePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Authentication.CreateAccountFailurePacket.reason reasonId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Authentication::CreateAccountFailurePacket_reason_IsValid(val))) {
            _internal_set_reasonid(static_cast<::Authentication::CreateAccountFailurePacket_reason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccountFailurePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Authentication.CreateAccountFailurePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // required .Authentication.CreateAccountFailurePacket.reason reasonId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reasonid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Authentication.CreateAccountFailurePacket)
  return target;
}

size_t CreateAccountFailurePacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Authentication.CreateAccountFailurePacket)
  size_t total_size = 0;

  if (_internal_has_userid()) {
    // required int32 userId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  if (_internal_has_reasonid()) {
    // required .Authentication.CreateAccountFailurePacket.reason reasonId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reasonid());
  }

  return total_size;
}
size_t CreateAccountFailurePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Authentication.CreateAccountFailurePacket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 userId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userid());

    // required .Authentication.CreateAccountFailurePacket.reason reasonId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reasonid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountFailurePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateAccountFailurePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountFailurePacket::GetClassData() const { return &_class_data_; }

void CreateAccountFailurePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateAccountFailurePacket *>(to)->MergeFrom(
      static_cast<const CreateAccountFailurePacket &>(from));
}


void CreateAccountFailurePacket::MergeFrom(const CreateAccountFailurePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Authentication.CreateAccountFailurePacket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reasonid_ = from.reasonid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountFailurePacket::CopyFrom(const CreateAccountFailurePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Authentication.CreateAccountFailurePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountFailurePacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CreateAccountFailurePacket::InternalSwap(CreateAccountFailurePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAccountFailurePacket, reasonid_)
      + sizeof(CreateAccountFailurePacket::reasonid_)
      - PROTOBUF_FIELD_OFFSET(CreateAccountFailurePacket, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountFailurePacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_addressbook_2eproto_getter, &descriptor_table_addressbook_2eproto_once,
      file_level_metadata_addressbook_2eproto[2]);
}

// ===================================================================

class LoginPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginPacket>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hashed_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

LoginPacket::LoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Authentication.LoginPacket)
}
LoginPacket::LoginPacket(const LoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  hashed_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hashed_password()) {
    hashed_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hashed_password(), 
      GetArenaForAllocation());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:Authentication.LoginPacket)
}

void LoginPacket::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hashed_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_ = 0;
}

LoginPacket::~LoginPacket() {
  // @@protoc_insertion_point(destructor:Authentication.LoginPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashed_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginPacket::ArenaDtor(void* object) {
  LoginPacket* _this = reinterpret_cast< LoginPacket* >(object);
  (void)_this;
}
void LoginPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:Authentication.LoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hashed_password_.ClearNonDefaultToEmpty();
    }
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Authentication.LoginPacket.email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string hashed_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hashed_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Authentication.LoginPacket.hashed_password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Authentication.LoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Authentication.LoginPacket.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string hashed_password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hashed_password().data(), static_cast<int>(this->_internal_hashed_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Authentication.LoginPacket.hashed_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hashed_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Authentication.LoginPacket)
  return target;
}

size_t LoginPacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Authentication.LoginPacket)
  size_t total_size = 0;

  if (_internal_has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (_internal_has_hashed_password()) {
    // required string hashed_password = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashed_password());
  }

  if (_internal_has_userid()) {
    // required int32 userId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return total_size;
}
size_t LoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Authentication.LoginPacket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string hashed_password = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashed_password());

    // required int32 userId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginPacket::GetClassData() const { return &_class_data_; }

void LoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginPacket *>(to)->MergeFrom(
      static_cast<const LoginPacket &>(from));
}


void LoginPacket::MergeFrom(const LoginPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Authentication.LoginPacket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hashed_password(from._internal_hashed_password());
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginPacket::CopyFrom(const LoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Authentication.LoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LoginPacket::InternalSwap(LoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hashed_password_, lhs_arena,
      &other->hashed_password_, rhs_arena
  );
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_addressbook_2eproto_getter, &descriptor_table_addressbook_2eproto_once,
      file_level_metadata_addressbook_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Authentication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Authentication::CreateAccountPacket* Arena::CreateMaybeMessage< ::Authentication::CreateAccountPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Authentication::CreateAccountPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::Authentication::CreateAccountSuccessPacket* Arena::CreateMaybeMessage< ::Authentication::CreateAccountSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Authentication::CreateAccountSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::Authentication::CreateAccountFailurePacket* Arena::CreateMaybeMessage< ::Authentication::CreateAccountFailurePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Authentication::CreateAccountFailurePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::Authentication::LoginPacket* Arena::CreateMaybeMessage< ::Authentication::LoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Authentication::LoginPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
