// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_addressbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_addressbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_addressbook_2eproto;
namespace Authentication {
class CreateAccountFailurePacket;
struct CreateAccountFailurePacketDefaultTypeInternal;
extern CreateAccountFailurePacketDefaultTypeInternal _CreateAccountFailurePacket_default_instance_;
class CreateAccountPacket;
struct CreateAccountPacketDefaultTypeInternal;
extern CreateAccountPacketDefaultTypeInternal _CreateAccountPacket_default_instance_;
class CreateAccountSuccessPacket;
struct CreateAccountSuccessPacketDefaultTypeInternal;
extern CreateAccountSuccessPacketDefaultTypeInternal _CreateAccountSuccessPacket_default_instance_;
class LoginFailurePacket;
struct LoginFailurePacketDefaultTypeInternal;
extern LoginFailurePacketDefaultTypeInternal _LoginFailurePacket_default_instance_;
class LoginPacket;
struct LoginPacketDefaultTypeInternal;
extern LoginPacketDefaultTypeInternal _LoginPacket_default_instance_;
class LoginSuccessPacket;
struct LoginSuccessPacketDefaultTypeInternal;
extern LoginSuccessPacketDefaultTypeInternal _LoginSuccessPacket_default_instance_;
}  // namespace Authentication
PROTOBUF_NAMESPACE_OPEN
template<> ::Authentication::CreateAccountFailurePacket* Arena::CreateMaybeMessage<::Authentication::CreateAccountFailurePacket>(Arena*);
template<> ::Authentication::CreateAccountPacket* Arena::CreateMaybeMessage<::Authentication::CreateAccountPacket>(Arena*);
template<> ::Authentication::CreateAccountSuccessPacket* Arena::CreateMaybeMessage<::Authentication::CreateAccountSuccessPacket>(Arena*);
template<> ::Authentication::LoginFailurePacket* Arena::CreateMaybeMessage<::Authentication::LoginFailurePacket>(Arena*);
template<> ::Authentication::LoginPacket* Arena::CreateMaybeMessage<::Authentication::LoginPacket>(Arena*);
template<> ::Authentication::LoginSuccessPacket* Arena::CreateMaybeMessage<::Authentication::LoginSuccessPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Authentication {

enum reason : int {
  ACCOUNT_ALREADY_EXISTS = 0,
  INVALID_CREDENTIALS = 1,
  INTERNAL_SERVER_ERROR = 2
};
bool reason_IsValid(int value);
constexpr reason reason_MIN = ACCOUNT_ALREADY_EXISTS;
constexpr reason reason_MAX = INTERNAL_SERVER_ERROR;
constexpr int reason_ARRAYSIZE = reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* reason_descriptor();
template<typename T>
inline const std::string& reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    reason_descriptor(), enum_t_value);
}
inline bool reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<reason>(
    reason_descriptor(), name, value);
}
// ===================================================================

class CreateAccountPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Authentication.CreateAccountPacket) */ {
 public:
  inline CreateAccountPacket() : CreateAccountPacket(nullptr) {}
  ~CreateAccountPacket() override;
  explicit constexpr CreateAccountPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountPacket(const CreateAccountPacket& from);
  CreateAccountPacket(CreateAccountPacket&& from) noexcept
    : CreateAccountPacket() {
    *this = ::std::move(from);
  }

  inline CreateAccountPacket& operator=(const CreateAccountPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountPacket& operator=(CreateAccountPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountPacket* internal_default_instance() {
    return reinterpret_cast<const CreateAccountPacket*>(
               &_CreateAccountPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountPacket& a, CreateAccountPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountPacket* New() const final {
    return new CreateAccountPacket();
  }

  CreateAccountPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Authentication.CreateAccountPacket";
  }
  protected:
  explicit CreateAccountPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kSaltFieldNumber = 3,
    kHashedPasswordFieldNumber = 4,
    kUserIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string salt = 3;
  bool has_salt() const;
  private:
  bool _internal_has_salt() const;
  public:
  void clear_salt();
  const std::string& salt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_salt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_salt();
  PROTOBUF_MUST_USE_RESULT std::string* release_salt();
  void set_allocated_salt(std::string* salt);
  private:
  const std::string& _internal_salt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt(const std::string& value);
  std::string* _internal_mutable_salt();
  public:

  // required string hashed_password = 4;
  bool has_hashed_password() const;
  private:
  bool _internal_has_hashed_password() const;
  public:
  void clear_hashed_password();
  const std::string& hashed_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashed_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashed_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_hashed_password();
  void set_allocated_hashed_password(std::string* hashed_password);
  private:
  const std::string& _internal_hashed_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_password(const std::string& value);
  std::string* _internal_mutable_hashed_password();
  public:

  // required int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Authentication.CreateAccountPacket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashed_password_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Authentication.CreateAccountSuccessPacket) */ {
 public:
  inline CreateAccountSuccessPacket() : CreateAccountSuccessPacket(nullptr) {}
  ~CreateAccountSuccessPacket() override;
  explicit constexpr CreateAccountSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountSuccessPacket(const CreateAccountSuccessPacket& from);
  CreateAccountSuccessPacket(CreateAccountSuccessPacket&& from) noexcept
    : CreateAccountSuccessPacket() {
    *this = ::std::move(from);
  }

  inline CreateAccountSuccessPacket& operator=(const CreateAccountSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountSuccessPacket& operator=(CreateAccountSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const CreateAccountSuccessPacket*>(
               &_CreateAccountSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAccountSuccessPacket& a, CreateAccountSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountSuccessPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountSuccessPacket* New() const final {
    return new CreateAccountSuccessPacket();
  }

  CreateAccountSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountSuccessPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountSuccessPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Authentication.CreateAccountSuccessPacket";
  }
  protected:
  explicit CreateAccountSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // optional int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Authentication.CreateAccountSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountFailurePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Authentication.CreateAccountFailurePacket) */ {
 public:
  inline CreateAccountFailurePacket() : CreateAccountFailurePacket(nullptr) {}
  ~CreateAccountFailurePacket() override;
  explicit constexpr CreateAccountFailurePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountFailurePacket(const CreateAccountFailurePacket& from);
  CreateAccountFailurePacket(CreateAccountFailurePacket&& from) noexcept
    : CreateAccountFailurePacket() {
    *this = ::std::move(from);
  }

  inline CreateAccountFailurePacket& operator=(const CreateAccountFailurePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountFailurePacket& operator=(CreateAccountFailurePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountFailurePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountFailurePacket* internal_default_instance() {
    return reinterpret_cast<const CreateAccountFailurePacket*>(
               &_CreateAccountFailurePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateAccountFailurePacket& a, CreateAccountFailurePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountFailurePacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountFailurePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountFailurePacket* New() const final {
    return new CreateAccountFailurePacket();
  }

  CreateAccountFailurePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountFailurePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountFailurePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountFailurePacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountFailurePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Authentication.CreateAccountFailurePacket";
  }
  protected:
  explicit CreateAccountFailurePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kReasonIdFieldNumber = 2,
  };
  // optional int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .Authentication.reason reasonId = 2;
  bool has_reasonid() const;
  private:
  bool _internal_has_reasonid() const;
  public:
  void clear_reasonid();
  ::Authentication::reason reasonid() const;
  void set_reasonid(::Authentication::reason value);
  private:
  ::Authentication::reason _internal_reasonid() const;
  void _internal_set_reasonid(::Authentication::reason value);
  public:

  // @@protoc_insertion_point(class_scope:Authentication.CreateAccountFailurePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  int reasonid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class LoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Authentication.LoginPacket) */ {
 public:
  inline LoginPacket() : LoginPacket(nullptr) {}
  ~LoginPacket() override;
  explicit constexpr LoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginPacket(const LoginPacket& from);
  LoginPacket(LoginPacket&& from) noexcept
    : LoginPacket() {
    *this = ::std::move(from);
  }

  inline LoginPacket& operator=(const LoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginPacket& operator=(LoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginPacket* internal_default_instance() {
    return reinterpret_cast<const LoginPacket*>(
               &_LoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginPacket& a, LoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginPacket* New() const final {
    return new LoginPacket();
  }

  LoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Authentication.LoginPacket";
  }
  protected:
  explicit LoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kHashedPasswordFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string hashed_password = 3;
  bool has_hashed_password() const;
  private:
  bool _internal_has_hashed_password() const;
  public:
  void clear_hashed_password();
  const std::string& hashed_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashed_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashed_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_hashed_password();
  void set_allocated_hashed_password(std::string* hashed_password);
  private:
  const std::string& _internal_hashed_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_password(const std::string& value);
  std::string* _internal_mutable_hashed_password();
  public:

  // optional int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Authentication.LoginPacket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashed_password_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class LoginSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Authentication.LoginSuccessPacket) */ {
 public:
  inline LoginSuccessPacket() : LoginSuccessPacket(nullptr) {}
  ~LoginSuccessPacket() override;
  explicit constexpr LoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginSuccessPacket(const LoginSuccessPacket& from);
  LoginSuccessPacket(LoginSuccessPacket&& from) noexcept
    : LoginSuccessPacket() {
    *this = ::std::move(from);
  }

  inline LoginSuccessPacket& operator=(const LoginSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginSuccessPacket& operator=(LoginSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const LoginSuccessPacket*>(
               &_LoginSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginSuccessPacket& a, LoginSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginSuccessPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginSuccessPacket* New() const final {
    return new LoginSuccessPacket();
  }

  LoginSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginSuccessPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginSuccessPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Authentication.LoginSuccessPacket";
  }
  protected:
  explicit LoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // optional int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Authentication.LoginSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class LoginFailurePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Authentication.LoginFailurePacket) */ {
 public:
  inline LoginFailurePacket() : LoginFailurePacket(nullptr) {}
  ~LoginFailurePacket() override;
  explicit constexpr LoginFailurePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginFailurePacket(const LoginFailurePacket& from);
  LoginFailurePacket(LoginFailurePacket&& from) noexcept
    : LoginFailurePacket() {
    *this = ::std::move(from);
  }

  inline LoginFailurePacket& operator=(const LoginFailurePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginFailurePacket& operator=(LoginFailurePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginFailurePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginFailurePacket* internal_default_instance() {
    return reinterpret_cast<const LoginFailurePacket*>(
               &_LoginFailurePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginFailurePacket& a, LoginFailurePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginFailurePacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginFailurePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginFailurePacket* New() const final {
    return new LoginFailurePacket();
  }

  LoginFailurePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginFailurePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginFailurePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginFailurePacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginFailurePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Authentication.LoginFailurePacket";
  }
  protected:
  explicit LoginFailurePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kReasonIdFieldNumber = 2,
  };
  // optional int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .Authentication.reason reasonId = 2;
  bool has_reasonid() const;
  private:
  bool _internal_has_reasonid() const;
  public:
  void clear_reasonid();
  ::Authentication::reason reasonid() const;
  void set_reasonid(::Authentication::reason value);
  private:
  ::Authentication::reason _internal_reasonid() const;
  void _internal_set_reasonid(::Authentication::reason value);
  public:

  // @@protoc_insertion_point(class_scope:Authentication.LoginFailurePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  int reasonid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountPacket

// required int32 userId = 1;
inline bool CreateAccountPacket::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateAccountPacket::has_userid() const {
  return _internal_has_userid();
}
inline void CreateAccountPacket::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountPacket::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountPacket::userid() const {
  // @@protoc_insertion_point(field_get:Authentication.CreateAccountPacket.userId)
  return _internal_userid();
}
inline void CreateAccountPacket::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  userid_ = value;
}
inline void CreateAccountPacket::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Authentication.CreateAccountPacket.userId)
}

// required string email = 2;
inline bool CreateAccountPacket::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountPacket::has_email() const {
  return _internal_has_email();
}
inline void CreateAccountPacket::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateAccountPacket::email() const {
  // @@protoc_insertion_point(field_get:Authentication.CreateAccountPacket.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountPacket::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Authentication.CreateAccountPacket.email)
}
inline std::string* CreateAccountPacket::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Authentication.CreateAccountPacket.email)
  return _s;
}
inline const std::string& CreateAccountPacket::_internal_email() const {
  return email_.Get();
}
inline void CreateAccountPacket::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountPacket::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountPacket::release_email() {
  // @@protoc_insertion_point(field_release:Authentication.CreateAccountPacket.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountPacket::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Authentication.CreateAccountPacket.email)
}

// required string salt = 3;
inline bool CreateAccountPacket::_internal_has_salt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountPacket::has_salt() const {
  return _internal_has_salt();
}
inline void CreateAccountPacket::clear_salt() {
  salt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateAccountPacket::salt() const {
  // @@protoc_insertion_point(field_get:Authentication.CreateAccountPacket.salt)
  return _internal_salt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountPacket::set_salt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Authentication.CreateAccountPacket.salt)
}
inline std::string* CreateAccountPacket::mutable_salt() {
  std::string* _s = _internal_mutable_salt();
  // @@protoc_insertion_point(field_mutable:Authentication.CreateAccountPacket.salt)
  return _s;
}
inline const std::string& CreateAccountPacket::_internal_salt() const {
  return salt_.Get();
}
inline void CreateAccountPacket::_internal_set_salt(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountPacket::_internal_mutable_salt() {
  _has_bits_[0] |= 0x00000002u;
  return salt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountPacket::release_salt() {
  // @@protoc_insertion_point(field_release:Authentication.CreateAccountPacket.salt)
  if (!_internal_has_salt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return salt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountPacket::set_allocated_salt(std::string* salt) {
  if (salt != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  salt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Authentication.CreateAccountPacket.salt)
}

// required string hashed_password = 4;
inline bool CreateAccountPacket::_internal_has_hashed_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateAccountPacket::has_hashed_password() const {
  return _internal_has_hashed_password();
}
inline void CreateAccountPacket::clear_hashed_password() {
  hashed_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CreateAccountPacket::hashed_password() const {
  // @@protoc_insertion_point(field_get:Authentication.CreateAccountPacket.hashed_password)
  return _internal_hashed_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountPacket::set_hashed_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 hashed_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Authentication.CreateAccountPacket.hashed_password)
}
inline std::string* CreateAccountPacket::mutable_hashed_password() {
  std::string* _s = _internal_mutable_hashed_password();
  // @@protoc_insertion_point(field_mutable:Authentication.CreateAccountPacket.hashed_password)
  return _s;
}
inline const std::string& CreateAccountPacket::_internal_hashed_password() const {
  return hashed_password_.Get();
}
inline void CreateAccountPacket::_internal_set_hashed_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hashed_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountPacket::_internal_mutable_hashed_password() {
  _has_bits_[0] |= 0x00000004u;
  return hashed_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountPacket::release_hashed_password() {
  // @@protoc_insertion_point(field_release:Authentication.CreateAccountPacket.hashed_password)
  if (!_internal_has_hashed_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hashed_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountPacket::set_allocated_hashed_password(std::string* hashed_password) {
  if (hashed_password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hashed_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashed_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Authentication.CreateAccountPacket.hashed_password)
}

// -------------------------------------------------------------------

// CreateAccountSuccessPacket

// optional int32 userId = 1;
inline bool CreateAccountSuccessPacket::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountSuccessPacket::has_userid() const {
  return _internal_has_userid();
}
inline void CreateAccountSuccessPacket::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountSuccessPacket::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountSuccessPacket::userid() const {
  // @@protoc_insertion_point(field_get:Authentication.CreateAccountSuccessPacket.userId)
  return _internal_userid();
}
inline void CreateAccountSuccessPacket::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void CreateAccountSuccessPacket::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Authentication.CreateAccountSuccessPacket.userId)
}

// -------------------------------------------------------------------

// CreateAccountFailurePacket

// optional int32 userId = 1;
inline bool CreateAccountFailurePacket::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountFailurePacket::has_userid() const {
  return _internal_has_userid();
}
inline void CreateAccountFailurePacket::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountFailurePacket::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountFailurePacket::userid() const {
  // @@protoc_insertion_point(field_get:Authentication.CreateAccountFailurePacket.userId)
  return _internal_userid();
}
inline void CreateAccountFailurePacket::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void CreateAccountFailurePacket::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Authentication.CreateAccountFailurePacket.userId)
}

// required .Authentication.reason reasonId = 2;
inline bool CreateAccountFailurePacket::_internal_has_reasonid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountFailurePacket::has_reasonid() const {
  return _internal_has_reasonid();
}
inline void CreateAccountFailurePacket::clear_reasonid() {
  reasonid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Authentication::reason CreateAccountFailurePacket::_internal_reasonid() const {
  return static_cast< ::Authentication::reason >(reasonid_);
}
inline ::Authentication::reason CreateAccountFailurePacket::reasonid() const {
  // @@protoc_insertion_point(field_get:Authentication.CreateAccountFailurePacket.reasonId)
  return _internal_reasonid();
}
inline void CreateAccountFailurePacket::_internal_set_reasonid(::Authentication::reason value) {
  assert(::Authentication::reason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reasonid_ = value;
}
inline void CreateAccountFailurePacket::set_reasonid(::Authentication::reason value) {
  _internal_set_reasonid(value);
  // @@protoc_insertion_point(field_set:Authentication.CreateAccountFailurePacket.reasonId)
}

// -------------------------------------------------------------------

// LoginPacket

// optional int32 userId = 1;
inline bool LoginPacket::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginPacket::has_userid() const {
  return _internal_has_userid();
}
inline void LoginPacket::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginPacket::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginPacket::userid() const {
  // @@protoc_insertion_point(field_get:Authentication.LoginPacket.userId)
  return _internal_userid();
}
inline void LoginPacket::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void LoginPacket::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Authentication.LoginPacket.userId)
}

// required string email = 2;
inline bool LoginPacket::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginPacket::has_email() const {
  return _internal_has_email();
}
inline void LoginPacket::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginPacket::email() const {
  // @@protoc_insertion_point(field_get:Authentication.LoginPacket.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginPacket::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Authentication.LoginPacket.email)
}
inline std::string* LoginPacket::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Authentication.LoginPacket.email)
  return _s;
}
inline const std::string& LoginPacket::_internal_email() const {
  return email_.Get();
}
inline void LoginPacket::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginPacket::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginPacket::release_email() {
  // @@protoc_insertion_point(field_release:Authentication.LoginPacket.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginPacket::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Authentication.LoginPacket.email)
}

// required string hashed_password = 3;
inline bool LoginPacket::_internal_has_hashed_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginPacket::has_hashed_password() const {
  return _internal_has_hashed_password();
}
inline void LoginPacket::clear_hashed_password() {
  hashed_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginPacket::hashed_password() const {
  // @@protoc_insertion_point(field_get:Authentication.LoginPacket.hashed_password)
  return _internal_hashed_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginPacket::set_hashed_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 hashed_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Authentication.LoginPacket.hashed_password)
}
inline std::string* LoginPacket::mutable_hashed_password() {
  std::string* _s = _internal_mutable_hashed_password();
  // @@protoc_insertion_point(field_mutable:Authentication.LoginPacket.hashed_password)
  return _s;
}
inline const std::string& LoginPacket::_internal_hashed_password() const {
  return hashed_password_.Get();
}
inline void LoginPacket::_internal_set_hashed_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hashed_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginPacket::_internal_mutable_hashed_password() {
  _has_bits_[0] |= 0x00000002u;
  return hashed_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginPacket::release_hashed_password() {
  // @@protoc_insertion_point(field_release:Authentication.LoginPacket.hashed_password)
  if (!_internal_has_hashed_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hashed_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginPacket::set_allocated_hashed_password(std::string* hashed_password) {
  if (hashed_password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hashed_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashed_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Authentication.LoginPacket.hashed_password)
}

// -------------------------------------------------------------------

// LoginSuccessPacket

// optional int32 userId = 1;
inline bool LoginSuccessPacket::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginSuccessPacket::has_userid() const {
  return _internal_has_userid();
}
inline void LoginSuccessPacket::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginSuccessPacket::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginSuccessPacket::userid() const {
  // @@protoc_insertion_point(field_get:Authentication.LoginSuccessPacket.userId)
  return _internal_userid();
}
inline void LoginSuccessPacket::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void LoginSuccessPacket::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Authentication.LoginSuccessPacket.userId)
}

// -------------------------------------------------------------------

// LoginFailurePacket

// optional int32 userId = 1;
inline bool LoginFailurePacket::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginFailurePacket::has_userid() const {
  return _internal_has_userid();
}
inline void LoginFailurePacket::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginFailurePacket::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginFailurePacket::userid() const {
  // @@protoc_insertion_point(field_get:Authentication.LoginFailurePacket.userId)
  return _internal_userid();
}
inline void LoginFailurePacket::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void LoginFailurePacket::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Authentication.LoginFailurePacket.userId)
}

// required .Authentication.reason reasonId = 2;
inline bool LoginFailurePacket::_internal_has_reasonid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginFailurePacket::has_reasonid() const {
  return _internal_has_reasonid();
}
inline void LoginFailurePacket::clear_reasonid() {
  reasonid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Authentication::reason LoginFailurePacket::_internal_reasonid() const {
  return static_cast< ::Authentication::reason >(reasonid_);
}
inline ::Authentication::reason LoginFailurePacket::reasonid() const {
  // @@protoc_insertion_point(field_get:Authentication.LoginFailurePacket.reasonId)
  return _internal_reasonid();
}
inline void LoginFailurePacket::_internal_set_reasonid(::Authentication::reason value) {
  assert(::Authentication::reason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reasonid_ = value;
}
inline void LoginFailurePacket::set_reasonid(::Authentication::reason value) {
  _internal_set_reasonid(value);
  // @@protoc_insertion_point(field_set:Authentication.LoginFailurePacket.reasonId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Authentication

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Authentication::reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Authentication::reason>() {
  return ::Authentication::reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
